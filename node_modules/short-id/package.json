{
  "name": "short-id",
  "version": "0.1.0-1",
  "description": "Short ID string generation",
  "main": "lib/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/UmbraEngineering/short-id.git"
  },
  "keywords": [
    "id",
    "unique",
    "generation"
  ],
  "author": {
    "name": "James Brumond"
  },
  "license": "MIT",
  "dependencies": {
    "sechash": "~0.2.1",
    "merge-recursive": "0.0.3"
  },
  "readme": "# short-id\n\nSelf-contained short-life ID generating module\n\n_Not guarenteed to be unique outside of a single instance of the module._\n\n## Install\n\n```bash\n$ npm install short-id\n```\n\n## Usage\n\n```javascript\nvar ids = require('short-id');\n\nids.generate();  // \"aeaf15\"\nids.generate();  // \"1d0449\"\n\nids.store('foo');  // \"8dbd46\"\nids.fetch('8dbd46');  // 'foo'\n\nids.invalidate('8dbd46');\nids.fetch('8dbd46');  // undefined\n```\n\n### ids.generate ( void )\n\nGenerates a new ID string and returns it.\n\n### ids.invalidate ( String key )\n\nInvalidates the given id key, removing any data stored with it and recycling it.\n\n### ids.store ( mixed value )\n\nGenerates a new key and stores a value under that key.\n\n### ids.fetch ( String key )\n\nLooks up a value stored under the given key.\n\n### ids.fetchAndInvalidate ( String key )\n\nThe equivilent of calling `fetch` and then `invalidate`. Returns the stored value.\n\n### ids.configure ( Object conf )\n\nChanges configuration values.\n\n```javascript\n// Call to configure shown with the default values\nids.configure({\n\tlength: 6,          // The length of the id strings to generate\n\talgorithm: 'sha1',  // The hashing algoritm to use in generating keys\n\tsalt: Math.random   // A salt value or function\n});\n```\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/UmbraEngineering/short-id/issues"
  },
  "_id": "short-id@0.1.0-1",
  "_from": "short-id@*"
}
