var fs = require('fs'),
    _ = require('underscore'),
    htmlparser = require("htmlparser");

var engine;
var supportedLibraries = [
  "handlebars" // only one so far
]

exports.templateRoot = './views/'
exports.templateExtension = '.hbs'

exports.setEngine = function(engineName) {
  if(_.contains(supportedLibraries,engineName)) {
    engine = require('./lib/' + engineName)
  }
}

exports.compile = function(layout,cb) {

  console.log("Compiling " + layout.source)

  var renderView = function(file,context,cb) {
    var templateFile = exports.templateRoot + file + exports.templateExtension
    console.log("Rendering template " + templateFile)
    fs.readFile(templateFile,'utf-8',function(er,data) {
      var renderedView = engine.renderFragment(data,context)
      cb(renderedView)
    })
  }

  // compile all children first, recursively
  if(layout.templates) {

    var templateCount = Object.keys(layout.templates).length
    var templateHandled = function() {
      templateCount--;
      if (templateCount == 0) {
        renderView(layout.source,layout.context,cb)
      }
    }

    for(var t in layout.templates) {

      if (layout.context) {
        // merge parent context into child
        for (var p in layout.context) {
          if (!layout.templates[t].context[p]) {
            layout.templates[t].context[p] = layout.context[p]
          }
        }
      } else {
        layout.context = {}
      }

      // parse template, locate any makomi directives

      // compile child and spit result into string
      exports.compile(layout.templates[t],function(renderedView) {
        layout.context[t] = renderedView;
        templateHandled()
      })
    }
  } else {
    renderView(layout.source,layout.context,cb)
  }

}