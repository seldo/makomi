{
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "name": "emcee",
  "description": "A bridge between the M and C bits of MVC",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/emcee.git"
  },
  "main": "emcee.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "devDependencies": {
    "tap": "~0.2.5"
  },
  "readme": "# emcee\n\nA model loader that a controller calls.  Basically, just the M and C\nbits of MVC.\n\nAn interface for controllers to specify that certain models will be\nneeded, and then have them get loaded.\n\n## Usage\n\n```javascript\nvar MC = require('emcee')\n\n// add a bunch of models\nMC.model('login', function (req, cb) {\n  // callback is called with (er, data)\n  req.session.get('login', cb)\n})\n\nMC.model('train', function (url, res, cb) {\n  \n})\n\n// later on...\n\nhttp.createServer(function (req, res) {\n  // check if the user is logged in.\n  var m = new MC()\n\n  // modelname, args...\n  m.load('login', req)\n  m.load('bike', req.url, res)\n  // different kind of bike: modelname, alias, args...\n  m.loadAs('bike', 'motorbike', 'dirt', 'roads')\n\n  m.end(function (er, models) {\n    // either there is an error, or all models are loaded on the\n    // 'models' object.  note that all errors are assumed to be\n    // catastrophic, so you only get the first error, and the\n    // models object will only contain the models that got loaded\n    // before the error occurred.\n  })\n}).listen(1337)\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/isaacs/emcee/issues"
  },
  "_id": "emcee@0.0.3",
  "_from": "emcee@*"
}
